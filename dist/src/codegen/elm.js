"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
var parser_1 = require("../parser");
var lodash_1 = require("lodash");
var childProcess = __importStar(require("child_process"));
function gen(messages) {
    // run the generated file through elm-format
    return new Promise(function (resolve, reject) {
        var proc = childProcess.exec("elm-format --stdin", {}, function (error, stdout, stderr) {
            if (error) {
                console.error(stderr);
                return reject(error);
            }
            return resolve(stdout);
        });
        if (!(proc === null || proc === void 0 ? void 0 : proc.stdin)) {
            return reject('failed to spawn elm-format');
        }
        var input = genRaw(messages);
        // console.error(input)
        var stdin = proc.stdin; // make typescript happy
        stdin.write(input, function () {
            stdin.end();
        });
    });
}
function genRaw(messages) {
    var needsEncode = Math.max.apply(Math, messages.map(function (m) { return m.placeholders.length; })) > 0;
    var needsPosix = messages.map(function (m) { return m.placeholders; }).flat().filter(function (v) { return v.type === parser_1.VarType.DATETIME; }).length > 0;
    return ("module Localization exposing (" + messages.map(function (m) { return (0, lodash_1.camelCase)(m.id); }).join(', ') + ")\n\n{-| File auto-generated by `@erosson/fluent-typesafe`. Do not edit!\n-}\n\nimport Html as H\nimport Html.Attributes as A\n" + (needsEncode ? 'import Json.Encode as E' : '') + "\n" + (needsPosix ? 'import Time exposing (Posix)' : '') + "\n\n\n" + messages.map(genMessage).join("\n\n") + "\n");
}
function genMessage(message) {
    if (message.placeholders.length) {
        return ((0, lodash_1.camelCase)(message.id) + ": { " + message.placeholders.map(genArgType).join(', ') + " } -> List (H.Attribute msg)\n" + (0, lodash_1.camelCase)(message.id) + " " + (message.placeholders.length ? 'args ' : '') + "=\n    [ A.attribute \"data-l10n-id\" " + JSON.stringify(message.id) + "\n    , A.attribute \"data-l10n-args\" <| E.encode 0 <| E.object\n        [ " + message.placeholders.map(genArgEncoder).join("\n        , ") + "\n        ]\n    ]\n");
    }
    else {
        return ((0, lodash_1.camelCase)(message.id) + ": H.Attribute msg\n" + (0, lodash_1.camelCase)(message.id) + " =\n    A.attribute \"data-l10n-id\" " + JSON.stringify(message.id) + "\n");
    }
}
function genArgType(v) {
    switch (v.type) {
        case parser_1.VarType.STRING: return v.name + " : String";
        case parser_1.VarType.NUMBER: return v.name + " : Float";
        case parser_1.VarType.DATETIME: return v.name + " : Posix";
    }
}
function genArgEncoder(v) {
    switch (v.type) {
        case parser_1.VarType.STRING: return "(" + JSON.stringify(v.name) + ", E.string args." + v.name + ")";
        case parser_1.VarType.NUMBER: return "(" + JSON.stringify(v.name) + ", E.float args." + v.name + ")";
        case parser_1.VarType.DATETIME: return "(" + JSON.stringify(v.name) + ", E.integer <| Time.posixToMillis args." + v.name + ")";
    }
}
exports["default"] = gen;
