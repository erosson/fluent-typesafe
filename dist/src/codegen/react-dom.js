"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
var parser_1 = require("../parser");
var lodash_1 = require("lodash");
var childProcess = __importStar(require("child_process"));
function gen(messages) {
    // run the generated file through elm-format
    return new Promise(function (resolve, reject) {
        var proc = childProcess.exec("prettier --stdin-filepath localization.tsx", {}, function (error, stdout, stderr) {
            if (error) {
                console.error(stderr);
                return reject(error);
            }
            return resolve(stdout);
        });
        if (!(proc === null || proc === void 0 ? void 0 : proc.stdin)) {
            return reject('failed to spawn prettier');
        }
        var input = genRaw(messages);
        // console.error(input)
        var stdin = proc.stdin; // make typescript happy
        stdin.write(input, function () {
            stdin.end();
        });
    });
}
function genRaw(messages) {
    return ("/** File auto-generated by `@erosson/fluent-typesafe`. Do not edit! */\n\n" + messages.map(genMessage).join("\n\n") + "\n");
}
function genMessage(message) {
    if (message.placeholders.length) {
        return ("export function " + (0, lodash_1.camelCase)(message.id) + "(args: {" + message.placeholders.map(genArgType).join(', ') + "}): {'data-l10n-id': string, 'data-l10n-args': string } {\n    return {\n        \"data-l10n-id\": " + JSON.stringify(message.id) + ",\n        \"data-l10n-args\": JSON.stringify({" + message.placeholders.map(genArgEncoder).map(function (arg) { return "\n            " + arg + ","; }).join('') + "\n        })\n    }\n}\n");
    }
    else {
        return ("export const " + (0, lodash_1.camelCase)(message.id) + ": {'data-l10n-id': string} =\n    {\"data-l10n-id\": " + JSON.stringify(message.id) + "}\n");
    }
}
function genArgType(v) {
    switch (v.type) {
        case parser_1.VarType.STRING: return v.name + ": string";
        case parser_1.VarType.NUMBER: return v.name + ": number";
        case parser_1.VarType.DATETIME: return v.name + ": Date";
    }
}
function genArgEncoder(v) {
    switch (v.type) {
        case parser_1.VarType.STRING: return JSON.stringify(v.name) + ": args." + v.name;
        case parser_1.VarType.NUMBER: return JSON.stringify(v.name) + ": args." + v.name;
        case parser_1.VarType.DATETIME: return JSON.stringify(v.name) + ": Math.floor(args." + v.name + ".getTime()/1000)";
    }
}
exports["default"] = gen;
