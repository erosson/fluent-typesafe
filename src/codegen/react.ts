import { Message, Var, VarType } from '../parser'
import { camelCase } from 'lodash'
import * as childProcess from 'child_process'
import { promisify } from 'util'

function gen(messages: Message[]): Promise<string> {
    // run the generated file through elm-format
    return new Promise((resolve, reject) => {
        const proc = childProcess.exec("prettier --stdin-filepath localization.tsx", {}, (error, stdout, stderr) => {
            if (error) {
                console.error(stderr)
                return reject(error)
            }
            return resolve(stdout)
        })
        if (!proc?.stdin) {
            return reject('failed to spawn prettier')
        }
        const input = genRaw(messages)
        // console.error(input)
        const stdin = proc.stdin // make typescript happy
        stdin.write(input, () => {
            stdin.end()
        })
    })
}

function genRaw(messages: Message[]) {
    return (`\
/** File auto-generated by \`@erosson/fluent-typesafe\`. Do not edit! */

${messages.map(genMessage).join("\n\n")}
`
    )
}
function genMessage(message: Message) {
    if (message.placeholders.length) {
        return (
            `\
export function ${camelCase(message.id)}(args: {${message.placeholders.map(genArgType).join(', ')}}): {'data-l10n-id': string, 'data-l10n-args': string } {
    return {
        "data-l10n-id": ${JSON.stringify(message.id)},
        "data-l10n-args": JSON.stringify({${message.placeholders.map(genArgEncoder).map(arg => `\n            ${arg},`).join('')}
        })
    }
}
`
        )
    }
    else {
        return (`\
export const ${camelCase(message.id)}: {'data-l10n-id': string} =
    {"data-l10n-id": ${JSON.stringify(message.id)}}
`
        )
    }
}

function genArgType(v: Var) {
    switch (v.type) {
        case VarType.STRING: return `${v.name}: string`
        case VarType.NUMBER: return `${v.name}: number`
        case VarType.DATETIME: return `${v.name}: Date`
    }
}

function genArgEncoder(v: Var) {
    switch (v.type) {
        case VarType.STRING: return `${JSON.stringify(v.name)}: args.${v.name}`
        case VarType.NUMBER: return `${JSON.stringify(v.name)}: args.${v.name}`
        case VarType.DATETIME: return `${JSON.stringify(v.name)}: Math.floor(args.${v.name}.getTime()/1000)`
    }
}

export default gen