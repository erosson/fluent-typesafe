import { Message, Var, VarType } from '../parser'
import { camelCase, upperFirst } from 'lodash'
import * as childProcess from 'child_process'
import { promisify } from 'util'

function gen(messages: Message[]): Promise<string> {
    // run the generated file through elm-format
    return new Promise((resolve, reject) => {
        const proc = childProcess.exec("prettier --stdin-filepath localization.tsx", {}, (error, stdout, stderr) => {
            if (error) {
                console.error(stderr)
                return reject(error)
            }
            return resolve(stdout)
        })
        if (!proc?.stdin) {
            return reject('failed to spawn prettier')
        }
        const input = genRaw(messages)
        // console.error(input)
        const stdin = proc.stdin // make typescript happy
        stdin.write(input, () => {
            stdin.end()
        })
    })
}

function genRaw(messages: Message[]) {
    return (`\
/** File auto-generated by \`@erosson/fluent-typesafe\`. Do not edit! */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import __React from 'react'
import * as __L from '@fluent/react'

// https://github.com/projectfluent/fluent.js/blob/master/fluent-react/src/localized.ts
// TODO: typesafe \`attrs\` too
type __props = Omit<__L.LocalizedProps, 'id' | 'vars' | 'attrs'>

${messages.map(genMessage).join("\n\n")}
`
    )
}
function genMessage(message: Message) {
    if (message.placeholders.length) {
        return (`\
export function ${upperFirst(camelCase(message.id))}(props: __props${genVars(message.placeholders)}${genAttrs(message.attributes)}): JSX.Element {
    return <__L.Localized id="${message.id}" {...props} />
}
`)
    }
    else {
        return (`\
export function ${upperFirst(camelCase(message.id))}(props: __props): JSX.Element {
    return <__L.Localized id="${message.id}" {...props} />
}
`)
    }
}

function genVars(placeholders: Var[]): string {
    return placeholders.length
        ? ` & {vars: {${placeholders.map(genVarType).join(', ')}}}`
        : ''
}

function genVarType(v: Var) {
    switch (v.type) {
        case VarType.STRING: return `${v.name}: string`
        case VarType.NUMBER: return `${v.name}: number`
        case VarType.DATETIME: return `${v.name}: Date`
    }
}

function genAttrs(attributes: Set<string>): string {
    return attributes.size
        ? ` & {attrs: {${Array.from(attributes.values()).map(a => `${JSON.stringify(a)}: boolean`).join(', ')}}}`
        : ''
}

export default gen